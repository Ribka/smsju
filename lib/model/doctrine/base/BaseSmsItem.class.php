<?php

/**
 * BaseSmsItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $item_name
 * @property integer $group_id
 * @property integer $family_id
 * @property string $item_code
 * @property string $item_type
 * @property integer $item_quantity
 * @property string $item_measuring_unit
 * @property string $item_description
 * @property string $item_store_id
 * @property SmsFamily $SmsFamily
 * @property SmsGroup $SmsGroup
 * @property Doctrine_Collection $SmsStockReciept
 * @property Doctrine_Collection $SmsIssue
 * 
 * @method string              getItemName()            Returns the current record's "item_name" value
 * @method integer             getGroupId()             Returns the current record's "group_id" value
 * @method integer             getFamilyId()            Returns the current record's "family_id" value
 * @method string              getItemCode()            Returns the current record's "item_code" value
 * @method string              getItemType()            Returns the current record's "item_type" value
 * @method integer             getItemQuantity()        Returns the current record's "item_quantity" value
 * @method string              getItemMeasuringUnit()   Returns the current record's "item_measuring_unit" value
 * @method string              getItemDescription()     Returns the current record's "item_description" value
 * @method string              getItemStoreId()         Returns the current record's "item_store_id" value
 * @method SmsFamily           getSmsFamily()           Returns the current record's "SmsFamily" value
 * @method SmsGroup            getSmsGroup()            Returns the current record's "SmsGroup" value
 * @method Doctrine_Collection getSmsStockReciept()     Returns the current record's "SmsStockReciept" collection
 * @method Doctrine_Collection getSmsIssue()            Returns the current record's "SmsIssue" collection
 * @method SmsItem             setItemName()            Sets the current record's "item_name" value
 * @method SmsItem             setGroupId()             Sets the current record's "group_id" value
 * @method SmsItem             setFamilyId()            Sets the current record's "family_id" value
 * @method SmsItem             setItemCode()            Sets the current record's "item_code" value
 * @method SmsItem             setItemType()            Sets the current record's "item_type" value
 * @method SmsItem             setItemQuantity()        Sets the current record's "item_quantity" value
 * @method SmsItem             setItemMeasuringUnit()   Sets the current record's "item_measuring_unit" value
 * @method SmsItem             setItemDescription()     Sets the current record's "item_description" value
 * @method SmsItem             setItemStoreId()         Sets the current record's "item_store_id" value
 * @method SmsItem             setSmsFamily()           Sets the current record's "SmsFamily" value
 * @method SmsItem             setSmsGroup()            Sets the current record's "SmsGroup" value
 * @method SmsItem             setSmsStockReciept()     Sets the current record's "SmsStockReciept" collection
 * @method SmsItem             setSmsIssue()            Sets the current record's "SmsIssue" collection
 * 
 * @package    sms
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseSmsItem extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('sms_item');
        $this->hasColumn('item_name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('group_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('family_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('item_code', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 255,
             ));
        $this->hasColumn('item_type', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('item_quantity', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('item_measuring_unit', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('item_description', 'string', 4000, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 4000,
             ));
        $this->hasColumn('item_store_id', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('SmsFamily', array(
             'local' => 'family_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('SmsGroup', array(
             'local' => 'group_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('SmsStockReciept', array(
             'local' => 'id',
             'foreign' => 'item_id'));

        $this->hasMany('SmsIssue', array(
             'local' => 'id',
             'foreign' => 'item_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}